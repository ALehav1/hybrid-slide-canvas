#!/usr/bin/env node
/**
 * build-tokens.mjs - Simple token transformer for Tailwind
 * Converts tokens.json to Tailwind theme extension
 * Alternative to style-dictionary for immediate implementation
 */

import fs from 'fs';
import path from 'path';

function resolveRef(path, root) {
  return path.split('.').reduce((acc, k) => acc?.[k], root)?.value ?? path;
}

function transformTokens(tokens, rootTokens) {
  const result = {};

  for (const [key, value] of Object.entries(tokens)) {
    if (typeof value === 'object' && value !== null) {
      if (value.value !== undefined) {
        // Terminal token with value, resolve references
        result[key] = resolveRef(value.value, rootTokens || tokens);
      } else {
        // Nested token group
        Object.assign(result, transformTokens(value, rootTokens || tokens));
      }
    }
  }
  return result;
}

async function buildTokens() {
  try {
    const tokensPath = path.join(process.cwd(), 'tokens', 'tokens.json');
    const outputPath = path.join(process.cwd(), 'tokens', 'build', 'tailwind.cjs');
    
    // Read tokens
    const tokensRaw = fs.readFileSync(tokensPath, 'utf8');
    const tokens = JSON.parse(tokensRaw);
    
    // Transform tokens
    const transformed = transformTokens(tokens, tokens); // Pass tokens as rootTokens
    
    // Create output directory
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Generate Tailwind config
    const tailwindConfig = `// Generated by build-tokens.mjs - DO NOT EDIT MANUALLY
module.exports = ${JSON.stringify(transformed, null, 2)};
`;
    
    fs.writeFileSync(outputPath, tailwindConfig);
    console.log('✅ Tokens built successfully:', outputPath);
    
  } catch (error) {
    console.error('❌ Token build failed:', error);
    process.exit(1);
  }
}

buildTokens();
